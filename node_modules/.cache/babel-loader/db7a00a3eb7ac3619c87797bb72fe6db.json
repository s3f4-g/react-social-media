{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { useButton } from '../ButtonUnstyled';\nimport { useListbox, defaultListboxReducer, ActionTypes } from '../ListboxUnstyled';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport useSelectChangeNotifiers from './useSelectChangeNotifiers';\n/**\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/#hook)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/api/use-select/)\n */\n\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open = false,\n    options,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue = defaultValueProp;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = multiple ? [] : null;\n  }\n\n  const optionsMap = React.useMemo(() => {\n    const map = new Map();\n    options.forEach(option => {\n      map.set(option.value, option);\n    });\n    return map;\n  }, [options]); // prevents closing the listbox on keyUp right after opening it\n\n  const ignoreEnterKeyUp = React.useRef(false); // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n\n  const ignoreClick = React.useRef(false); // Ensure the listbox is focused after opening\n\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useSelectChangeNotifiers();\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      onOpenChange == null ? void 0 : onOpenChange(!open);\n    }\n\n    ignoreClick.current = false;\n  };\n\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      onOpenChange == null ? void 0 : onOpenChange(true);\n    }\n  };\n\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current;\n\n      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n    }\n\n    ignoreEnterKeyUp.current = false;\n  };\n\n  const createHandleListboxItemClick = React.useCallback(otherHandlers => event => {\n    var _otherHandlers$onClic2;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (!multiple) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  }, [multiple, onOpenChange]);\n\n  const createHandleListboxBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\n\n    if (!event.defaultPrevented) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  };\n\n  const listboxReducer = React.useCallback((state, action) => {\n    const newState = defaultListboxReducer(state, action); // change selection when listbox is closed\n\n    if (action.type === ActionTypes.keyDown && !open && (action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown')) {\n      return _extends({}, newState, {\n        selectedValue: newState.highlightedValue\n      });\n    }\n\n    if (action.type === ActionTypes.blur || action.type === ActionTypes.setValue || action.type === ActionTypes.optionsChange) {\n      return _extends({}, newState, {\n        highlightedValue: newState.selectedValue\n      });\n    }\n\n    return newState;\n  }, [open]);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible\n  } = useButton({\n    disabled,\n    ref: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => options.map(o => o.value), [options]);\n  let useListboxParameters;\n  const isOptionDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n\n    const option = optionsMap.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [optionsMap]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = optionsMap.get(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return optionStringifier(option);\n  }, [optionsMap, optionStringifier]);\n\n  if (props.multiple) {\n    const onChangeMultiple = onChange;\n    useListboxParameters = {\n      defaultValue: defaultValue,\n      id: listboxId,\n      isOptionDisabled,\n      listboxRef: handleListboxRef,\n      multiple: true,\n      onChange: (e, newValues) => {\n        onChangeMultiple == null ? void 0 : onChangeMultiple(e, newValues);\n      },\n      onHighlightChange: (e, newValue) => {\n        onHighlightChange == null ? void 0 : onHighlightChange(e, newValue != null ? newValue : null);\n      },\n      options: optionValues,\n      optionStringifier: stringifyOption,\n      value: valueProp\n    };\n  } else {\n    const onChangeSingle = onChange;\n    useListboxParameters = {\n      defaultValue: defaultValue,\n      id: listboxId,\n      isOptionDisabled,\n      listboxRef: handleListboxRef,\n      multiple: false,\n      onChange: (e, newValue) => {\n        onChangeSingle == null ? void 0 : onChangeSingle(e, newValue);\n      },\n      onHighlightChange: (e, newValue) => {\n        onHighlightChange == null ? void 0 : onHighlightChange(e, newValue);\n      },\n      options: optionValues,\n      optionStringifier: stringifyOption,\n      stateReducer: listboxReducer,\n      value: valueProp\n    };\n  }\n\n  const {\n    getRootProps: getListboxRootProps,\n    getOptionProps: getListboxOptionProps,\n    getOptionState,\n    highlightedOption,\n    selectedOption\n  } = useListbox(useListboxParameters);\n  React.useEffect(() => {\n    notifySelectionChanged(selectedOption);\n  }, [selectedOption, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedOption);\n  }, [highlightedOption, notifyHighlightChanged]);\n\n  const getButtonProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n\n  const getListboxProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return getListboxRootProps(_extends({}, otherHandlers, {\n      onBlur: createHandleListboxBlur(otherHandlers),\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    }));\n  };\n\n  const getOptionProps = React.useCallback(function (optionValue) {\n    let otherHandlers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return getListboxOptionProps(optionValue, _extends({}, otherHandlers, {\n      onClick: createHandleListboxItemClick(otherHandlers)\n    }));\n  }, [getListboxOptionProps, createHandleListboxItemClick]);\n  React.useDebugValue({\n    selectedOption,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => ({\n    listboxRef,\n    getOptionProps,\n    getOptionState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [getOptionProps, getOptionState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    contextValue,\n    open,\n    value: selectedOption,\n    highlightedOption\n  };\n}\n\nexport default useSelect;","map":{"version":3,"sources":["C:/Users/sefac/Desktop/yazılım/react-social-media/node_modules/@mui/base/SelectUnstyled/useSelect.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","useButton","useListbox","defaultListboxReducer","ActionTypes","defaultOptionStringifier","useSelectChangeNotifiers","useSelect","props","buttonRef","buttonRefProp","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","onChange","onHighlightChange","onOpenChange","open","options","optionStringifier","value","valueProp","useRef","handleButtonRef","undefined","optionsMap","useMemo","map","Map","forEach","option","set","ignoreEnterKeyUp","ignoreClick","listboxFocusRequested","requestListboxFocus","useState","focusListboxIfRequested","useCallback","current","focus","handleListboxRef","notifySelectionChanged","notifyHighlightChanged","registerHighlightChangeHandler","registerSelectionChangeHandler","useEffect","createHandleMouseDown","otherHandlers","event","_otherHandlers$onMous","onMouseDown","call","defaultPrevented","createHandleButtonClick","_otherHandlers$onClic","onClick","createHandleButtonKeyDown","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","createHandleListboxKeyUp","_otherHandlers$onKeyU","onKeyUp","closingKeys","includes","_buttonRef$current","createHandleListboxItemClick","_otherHandlers$onClic2","createHandleListboxBlur","_otherHandlers$onBlur","onBlur","listboxReducer","state","action","newState","type","keyDown","selectedValue","highlightedValue","blur","setValue","optionsChange","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","ref","optionValues","o","useListboxParameters","isOptionDisabled","valueToCheck","_option$disabled","get","stringifyOption","onChangeMultiple","id","e","newValues","newValue","onChangeSingle","stateReducer","getListboxRootProps","getOptionProps","getListboxOptionProps","getOptionState","highlightedOption","selectedOption","getButtonProps","role","getListboxProps","optionValue","useDebugValue","contextValue"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { useButton } from '../ButtonUnstyled';\nimport { useListbox, defaultListboxReducer, ActionTypes } from '../ListboxUnstyled';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport useSelectChangeNotifiers from './useSelectChangeNotifiers';\n/**\n *\n * Demos:\n *\n * - [Unstyled Select](https://mui.com/base/react-select/#hook)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/api/use-select/)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open = false,\n    options,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue = defaultValueProp;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = multiple ? [] : null;\n  }\n  const optionsMap = React.useMemo(() => {\n    const map = new Map();\n    options.forEach(option => {\n      map.set(option.value, option);\n    });\n    return map;\n  }, [options]);\n\n  // prevents closing the listbox on keyUp right after opening it\n  const ignoreEnterKeyUp = React.useRef(false);\n\n  // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n  const ignoreClick = React.useRef(false);\n\n  // Ensure the listbox is focused after opening\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useSelectChangeNotifiers();\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      onOpenChange == null ? void 0 : onOpenChange(!open);\n    }\n    ignoreClick.current = false;\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      onOpenChange == null ? void 0 : onOpenChange(true);\n    }\n  };\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current;\n      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n    }\n    ignoreEnterKeyUp.current = false;\n  };\n  const createHandleListboxItemClick = React.useCallback(otherHandlers => event => {\n    var _otherHandlers$onClic2;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (!multiple) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  }, [multiple, onOpenChange]);\n  const createHandleListboxBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur;\n    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);\n    if (!event.defaultPrevented) {\n      onOpenChange == null ? void 0 : onOpenChange(false);\n    }\n  };\n  const listboxReducer = React.useCallback((state, action) => {\n    const newState = defaultListboxReducer(state, action);\n\n    // change selection when listbox is closed\n    if (action.type === ActionTypes.keyDown && !open && (action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown')) {\n      return _extends({}, newState, {\n        selectedValue: newState.highlightedValue\n      });\n    }\n    if (action.type === ActionTypes.blur || action.type === ActionTypes.setValue || action.type === ActionTypes.optionsChange) {\n      return _extends({}, newState, {\n        highlightedValue: newState.selectedValue\n      });\n    }\n    return newState;\n  }, [open]);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible\n  } = useButton({\n    disabled,\n    ref: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => options.map(o => o.value), [options]);\n  let useListboxParameters;\n  const isOptionDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = optionsMap.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [optionsMap]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = optionsMap.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return optionStringifier(option);\n  }, [optionsMap, optionStringifier]);\n  if (props.multiple) {\n    const onChangeMultiple = onChange;\n    useListboxParameters = {\n      defaultValue: defaultValue,\n      id: listboxId,\n      isOptionDisabled,\n      listboxRef: handleListboxRef,\n      multiple: true,\n      onChange: (e, newValues) => {\n        onChangeMultiple == null ? void 0 : onChangeMultiple(e, newValues);\n      },\n      onHighlightChange: (e, newValue) => {\n        onHighlightChange == null ? void 0 : onHighlightChange(e, newValue != null ? newValue : null);\n      },\n      options: optionValues,\n      optionStringifier: stringifyOption,\n      value: valueProp\n    };\n  } else {\n    const onChangeSingle = onChange;\n    useListboxParameters = {\n      defaultValue: defaultValue,\n      id: listboxId,\n      isOptionDisabled,\n      listboxRef: handleListboxRef,\n      multiple: false,\n      onChange: (e, newValue) => {\n        onChangeSingle == null ? void 0 : onChangeSingle(e, newValue);\n      },\n      onHighlightChange: (e, newValue) => {\n        onHighlightChange == null ? void 0 : onHighlightChange(e, newValue);\n      },\n      options: optionValues,\n      optionStringifier: stringifyOption,\n      stateReducer: listboxReducer,\n      value: valueProp\n    };\n  }\n  const {\n    getRootProps: getListboxRootProps,\n    getOptionProps: getListboxOptionProps,\n    getOptionState,\n    highlightedOption,\n    selectedOption\n  } = useListbox(useListboxParameters);\n  React.useEffect(() => {\n    notifySelectionChanged(selectedOption);\n  }, [selectedOption, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedOption);\n  }, [highlightedOption, notifyHighlightChanged]);\n  const getButtonProps = (otherHandlers = {}) => {\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n  const getListboxProps = (otherHandlers = {}) => getListboxRootProps(_extends({}, otherHandlers, {\n    onBlur: createHandleListboxBlur(otherHandlers),\n    onKeyUp: createHandleListboxKeyUp(otherHandlers)\n  }));\n  const getOptionProps = React.useCallback((optionValue, otherHandlers = {}) => {\n    return getListboxOptionProps(optionValue, _extends({}, otherHandlers, {\n      onClick: createHandleListboxItemClick(otherHandlers)\n    }));\n  }, [getListboxOptionProps, createHandleListboxItemClick]);\n  React.useDebugValue({\n    selectedOption,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => ({\n    listboxRef,\n    getOptionProps,\n    getOptionState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [getOptionProps, getOptionState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    contextValue,\n    open,\n    value: selectedOption,\n    highlightedOption\n  };\n}\nexport default useSelect;"]},"metadata":{},"sourceType":"module"}